# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/globalid/all/globalid.rbi
#
# globalid-0.4.2

module URI
end
class URI::GID < URI::Generic
  def app; end
  def check_host(host); end
  def check_path(path); end
  def check_scheme(scheme); end
  def model_id; end
  def model_name; end
  def params; end
  def parse_query_params(query); end
  def query=(query); end
  def self.build(args); end
  def self.create(app, model, params = nil); end
  def self.parse(uri); end
  def self.validate_app(app); end
  def set_model_components(path, validate = nil); end
  def set_params(params); end
  def set_path(path); end
  def set_query(query); end
  def to_s; end
  def validate_component(component); end
  def validate_model_id(model_id, model_name); end
end
class URI::GID::MissingModelIdError < URI::InvalidComponentError
end
class GlobalID
  def ==(other); end
  def app(*args, &block); end
  def eql?(other); end
  def find(options = nil); end
  def hash; end
  def initialize(gid, options = nil); end
  def model_class; end
  def model_id(*args, &block); end
  def model_name(*args, &block); end
  def params(*args, &block); end
  def self.app; end
  def self.app=(app); end
  def self.create(model, options = nil); end
  def self.eager_load!; end
  def self.find(gid, options = nil); end
  def self.parse(gid, options = nil); end
  def self.parse_encoded_gid(gid, options); end
  def self.repad_gid(gid); end
  def to_param; end
  def to_s(*args, &block); end
  def uri; end
  extend ActiveSupport::Autoload
end
class GlobalID::Railtie < Rails::Railtie
end
class SignedGlobalID < GlobalID
  def ==(other); end
  def encoded_expiration; end
  def expires_at; end
  def initialize(gid, options = nil); end
  def pick_expiration(options); end
  def purpose; end
  def self.expires_in; end
  def self.expires_in=(arg0); end
  def self.parse(sgid, options = nil); end
  def self.pick_purpose(options); end
  def self.pick_verifier(options); end
  def self.raise_if_expired(expires_at); end
  def self.verifier; end
  def self.verifier=(arg0); end
  def self.verify(sgid, options); end
  def to_h; end
  def to_param; end
  def to_s; end
  def verifier; end
end
class SignedGlobalID::ExpiredMessage < StandardError
end
module GlobalID::Identification
  def to_gid(options = nil); end
  def to_gid_param(options = nil); end
  def to_global_id(options = nil); end
  def to_sgid(options = nil); end
  def to_sgid_param(options = nil); end
  def to_signed_global_id(options = nil); end
  extend ActiveSupport::Concern
end
class GlobalID::Verifier < ActiveSupport::MessageVerifier
  def decode(data); end
  def encode(data); end
end
module GlobalID::Locator
  def self.find_allowed?(model_class, only = nil); end
  def self.locate(gid, options = nil); end
  def self.locate_many(gids, options = nil); end
  def self.locate_many_signed(sgids, options = nil); end
  def self.locate_signed(sgid, options = nil); end
  def self.locator_for(gid); end
  def self.normalize_app(app); end
  def self.parse_allowed(gids, only = nil); end
  def self.use(app, locator = nil, &locator_block); end
end
class GlobalID::Locator::BaseLocator
  def find_records(model_class, ids, options); end
  def locate(gid); end
  def locate_many(gids, options = nil); end
end
class GlobalID::Locator::UnscopedLocator < GlobalID::Locator::BaseLocator
  def find_records(model_class, ids, options); end
  def locate(gid); end
  def unscoped(model_class); end
end
class GlobalID::Locator::BlockLocator
  def initialize(block); end
  def locate(gid); end
  def locate_many(gids, options = nil); end
end
class Object < BasicObject
  def avatar_fetcher; end
end
module Relationship::GeneratedAttributeMethods
  def created_at; end
  def created_at=(value); end
  def created_at?(*args); end
  def created_at_before_last_save(*args); end
  def created_at_before_type_cast(*args); end
  def created_at_came_from_user?(*args); end
  def created_at_change(*args); end
  def created_at_change_to_be_saved(*args); end
  def created_at_changed?(*args); end
  def created_at_in_database(*args); end
  def created_at_previous_change(*args); end
  def created_at_previously_changed?(*args); end
  def created_at_was(*args); end
  def created_at_will_change!(*args); end
  def followed_id; end
  def followed_id=(value); end
  def followed_id?(*args); end
  def followed_id_before_last_save(*args); end
  def followed_id_before_type_cast(*args); end
  def followed_id_came_from_user?(*args); end
  def followed_id_change(*args); end
  def followed_id_change_to_be_saved(*args); end
  def followed_id_changed?(*args); end
  def followed_id_in_database(*args); end
  def followed_id_previous_change(*args); end
  def followed_id_previously_changed?(*args); end
  def followed_id_was(*args); end
  def followed_id_will_change!(*args); end
  def follower_id; end
  def follower_id=(value); end
  def follower_id?(*args); end
  def follower_id_before_last_save(*args); end
  def follower_id_before_type_cast(*args); end
  def follower_id_came_from_user?(*args); end
  def follower_id_change(*args); end
  def follower_id_change_to_be_saved(*args); end
  def follower_id_changed?(*args); end
  def follower_id_in_database(*args); end
  def follower_id_previous_change(*args); end
  def follower_id_previously_changed?(*args); end
  def follower_id_was(*args); end
  def follower_id_will_change!(*args); end
  def id_before_last_save(*args); end
  def id_came_from_user?(*args); end
  def id_change(*args); end
  def id_change_to_be_saved(*args); end
  def id_changed?(*args); end
  def id_previous_change(*args); end
  def id_previously_changed?(*args); end
  def id_will_change!(*args); end
  def restore_created_at!(*args); end
  def restore_followed_id!(*args); end
  def restore_follower_id!(*args); end
  def restore_id!(*args); end
  def restore_updated_at!(*args); end
  def saved_change_to_created_at(*args); end
  def saved_change_to_created_at?(*args); end
  def saved_change_to_followed_id(*args); end
  def saved_change_to_followed_id?(*args); end
  def saved_change_to_follower_id(*args); end
  def saved_change_to_follower_id?(*args); end
  def saved_change_to_id(*args); end
  def saved_change_to_id?(*args); end
  def saved_change_to_updated_at(*args); end
  def saved_change_to_updated_at?(*args); end
  def updated_at; end
  def updated_at=(value); end
  def updated_at?(*args); end
  def updated_at_before_last_save(*args); end
  def updated_at_before_type_cast(*args); end
  def updated_at_came_from_user?(*args); end
  def updated_at_change(*args); end
  def updated_at_change_to_be_saved(*args); end
  def updated_at_changed?(*args); end
  def updated_at_in_database(*args); end
  def updated_at_previous_change(*args); end
  def updated_at_previously_changed?(*args); end
  def updated_at_was(*args); end
  def updated_at_will_change!(*args); end
  def will_save_change_to_created_at?(*args); end
  def will_save_change_to_followed_id?(*args); end
  def will_save_change_to_follower_id?(*args); end
  def will_save_change_to_id?(*args); end
  def will_save_change_to_updated_at?(*args); end
end
module Relationship::GeneratedRelationMethods
  def name(*args, &block); end
end
class Relationship < ApplicationRecord
  def self.default_scope_override; end
end
class ActiveStorage::Blob < ActiveRecord::Base
  def self.default_scope_override; end
end
class ActiveStorage::Attachment < ActiveRecord::Base
  def self.default_scope_override; end
end
module ActiveStorage::Blob::GeneratedAttributeMethods
  def byte_size; end
  def byte_size=(value); end
  def byte_size?(*args); end
  def byte_size_before_last_save(*args); end
  def byte_size_before_type_cast(*args); end
  def byte_size_came_from_user?(*args); end
  def byte_size_change(*args); end
  def byte_size_change_to_be_saved(*args); end
  def byte_size_changed?(*args); end
  def byte_size_in_database(*args); end
  def byte_size_previous_change(*args); end
  def byte_size_previously_changed?(*args); end
  def byte_size_was(*args); end
  def byte_size_will_change!(*args); end
  def checksum; end
  def checksum=(value); end
  def checksum?(*args); end
  def checksum_before_last_save(*args); end
  def checksum_before_type_cast(*args); end
  def checksum_came_from_user?(*args); end
  def checksum_change(*args); end
  def checksum_change_to_be_saved(*args); end
  def checksum_changed?(*args); end
  def checksum_in_database(*args); end
  def checksum_previous_change(*args); end
  def checksum_previously_changed?(*args); end
  def checksum_was(*args); end
  def checksum_will_change!(*args); end
  def content_type; end
  def content_type=(value); end
  def content_type?(*args); end
  def content_type_before_last_save(*args); end
  def content_type_before_type_cast(*args); end
  def content_type_came_from_user?(*args); end
  def content_type_change(*args); end
  def content_type_change_to_be_saved(*args); end
  def content_type_changed?(*args); end
  def content_type_in_database(*args); end
  def content_type_previous_change(*args); end
  def content_type_previously_changed?(*args); end
  def content_type_was(*args); end
  def content_type_will_change!(*args); end
  def created_at; end
  def created_at=(value); end
  def created_at?(*args); end
  def created_at_before_last_save(*args); end
  def created_at_before_type_cast(*args); end
  def created_at_came_from_user?(*args); end
  def created_at_change(*args); end
  def created_at_change_to_be_saved(*args); end
  def created_at_changed?(*args); end
  def created_at_in_database(*args); end
  def created_at_previous_change(*args); end
  def created_at_previously_changed?(*args); end
  def created_at_was(*args); end
  def created_at_will_change!(*args); end
  def filename; end
  def filename=(value); end
  def filename?(*args); end
  def filename_before_last_save(*args); end
  def filename_before_type_cast(*args); end
  def filename_came_from_user?(*args); end
  def filename_change(*args); end
  def filename_change_to_be_saved(*args); end
  def filename_changed?(*args); end
  def filename_in_database(*args); end
  def filename_previous_change(*args); end
  def filename_previously_changed?(*args); end
  def filename_was(*args); end
  def filename_will_change!(*args); end
  def id_before_last_save(*args); end
  def id_came_from_user?(*args); end
  def id_change(*args); end
  def id_change_to_be_saved(*args); end
  def id_changed?(*args); end
  def id_previous_change(*args); end
  def id_previously_changed?(*args); end
  def id_will_change!(*args); end
  def key; end
  def key=(value); end
  def key?(*args); end
  def key_before_last_save(*args); end
  def key_before_type_cast(*args); end
  def key_came_from_user?(*args); end
  def key_change(*args); end
  def key_change_to_be_saved(*args); end
  def key_changed?(*args); end
  def key_in_database(*args); end
  def key_previous_change(*args); end
  def key_previously_changed?(*args); end
  def key_was(*args); end
  def key_will_change!(*args); end
  def metadata; end
  def metadata=(value); end
  def metadata?(*args); end
  def metadata_before_last_save(*args); end
  def metadata_before_type_cast(*args); end
  def metadata_came_from_user?(*args); end
  def metadata_change(*args); end
  def metadata_change_to_be_saved(*args); end
  def metadata_changed?(*args); end
  def metadata_in_database(*args); end
  def metadata_previous_change(*args); end
  def metadata_previously_changed?(*args); end
  def metadata_was(*args); end
  def metadata_will_change!(*args); end
  def restore_byte_size!(*args); end
  def restore_checksum!(*args); end
  def restore_content_type!(*args); end
  def restore_created_at!(*args); end
  def restore_filename!(*args); end
  def restore_id!(*args); end
  def restore_key!(*args); end
  def restore_metadata!(*args); end
  def saved_change_to_byte_size(*args); end
  def saved_change_to_byte_size?(*args); end
  def saved_change_to_checksum(*args); end
  def saved_change_to_checksum?(*args); end
  def saved_change_to_content_type(*args); end
  def saved_change_to_content_type?(*args); end
  def saved_change_to_created_at(*args); end
  def saved_change_to_created_at?(*args); end
  def saved_change_to_filename(*args); end
  def saved_change_to_filename?(*args); end
  def saved_change_to_id(*args); end
  def saved_change_to_id?(*args); end
  def saved_change_to_key(*args); end
  def saved_change_to_key?(*args); end
  def saved_change_to_metadata(*args); end
  def saved_change_to_metadata?(*args); end
  def will_save_change_to_byte_size?(*args); end
  def will_save_change_to_checksum?(*args); end
  def will_save_change_to_content_type?(*args); end
  def will_save_change_to_created_at?(*args); end
  def will_save_change_to_filename?(*args); end
  def will_save_change_to_id?(*args); end
  def will_save_change_to_key?(*args); end
  def will_save_change_to_metadata?(*args); end
end
module ActiveStorage::Attachment::GeneratedAttributeMethods
  def blob_id; end
  def blob_id=(value); end
  def blob_id?(*args); end
  def blob_id_before_last_save(*args); end
  def blob_id_before_type_cast(*args); end
  def blob_id_came_from_user?(*args); end
  def blob_id_change(*args); end
  def blob_id_change_to_be_saved(*args); end
  def blob_id_changed?(*args); end
  def blob_id_in_database(*args); end
  def blob_id_previous_change(*args); end
  def blob_id_previously_changed?(*args); end
  def blob_id_was(*args); end
  def blob_id_will_change!(*args); end
  def created_at; end
  def created_at=(value); end
  def created_at?(*args); end
  def created_at_before_last_save(*args); end
  def created_at_before_type_cast(*args); end
  def created_at_came_from_user?(*args); end
  def created_at_change(*args); end
  def created_at_change_to_be_saved(*args); end
  def created_at_changed?(*args); end
  def created_at_in_database(*args); end
  def created_at_previous_change(*args); end
  def created_at_previously_changed?(*args); end
  def created_at_was(*args); end
  def created_at_will_change!(*args); end
  def id_before_last_save(*args); end
  def id_came_from_user?(*args); end
  def id_change(*args); end
  def id_change_to_be_saved(*args); end
  def id_changed?(*args); end
  def id_previous_change(*args); end
  def id_previously_changed?(*args); end
  def id_will_change!(*args); end
  def name; end
  def name=(value); end
  def name?(*args); end
  def name_before_last_save(*args); end
  def name_before_type_cast(*args); end
  def name_came_from_user?(*args); end
  def name_change(*args); end
  def name_change_to_be_saved(*args); end
  def name_changed?(*args); end
  def name_in_database(*args); end
  def name_previous_change(*args); end
  def name_previously_changed?(*args); end
  def name_was(*args); end
  def name_will_change!(*args); end
  def record_id; end
  def record_id=(value); end
  def record_id?(*args); end
  def record_id_before_last_save(*args); end
  def record_id_before_type_cast(*args); end
  def record_id_came_from_user?(*args); end
  def record_id_change(*args); end
  def record_id_change_to_be_saved(*args); end
  def record_id_changed?(*args); end
  def record_id_in_database(*args); end
  def record_id_previous_change(*args); end
  def record_id_previously_changed?(*args); end
  def record_id_was(*args); end
  def record_id_will_change!(*args); end
  def record_type; end
  def record_type=(value); end
  def record_type?(*args); end
  def record_type_before_last_save(*args); end
  def record_type_before_type_cast(*args); end
  def record_type_came_from_user?(*args); end
  def record_type_change(*args); end
  def record_type_change_to_be_saved(*args); end
  def record_type_changed?(*args); end
  def record_type_in_database(*args); end
  def record_type_previous_change(*args); end
  def record_type_previously_changed?(*args); end
  def record_type_was(*args); end
  def record_type_will_change!(*args); end
  def restore_blob_id!(*args); end
  def restore_created_at!(*args); end
  def restore_id!(*args); end
  def restore_name!(*args); end
  def restore_record_id!(*args); end
  def restore_record_type!(*args); end
  def saved_change_to_blob_id(*args); end
  def saved_change_to_blob_id?(*args); end
  def saved_change_to_created_at(*args); end
  def saved_change_to_created_at?(*args); end
  def saved_change_to_id(*args); end
  def saved_change_to_id?(*args); end
  def saved_change_to_name(*args); end
  def saved_change_to_name?(*args); end
  def saved_change_to_record_id(*args); end
  def saved_change_to_record_id?(*args); end
  def saved_change_to_record_type(*args); end
  def saved_change_to_record_type?(*args); end
  def will_save_change_to_blob_id?(*args); end
  def will_save_change_to_created_at?(*args); end
  def will_save_change_to_id?(*args); end
  def will_save_change_to_name?(*args); end
  def will_save_change_to_record_id?(*args); end
  def will_save_change_to_record_type?(*args); end
end
