# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/simple_token_authentication/all/simple_token_authentication.rbi
#
# simple_token_authentication-1.17.0
module SimpleTokenAuthentication
  def self.adapter_dependency_fulfilled?(adapter_short_name); end
  def self.ensure_controllers_can_act_as_token_authentication_handlers(controller_adapters); end
  def self.ensure_models_can_act_as_token_authenticatables(model_adapters); end
  def self.load_available_adapters(adapters_short_names); end
  extend SimpleTokenAuthentication::Configuration
end
class SimpleTokenAuthentication::TokenGenerator
  def generate_token; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module SimpleTokenAuthentication::ActsAsTokenAuthenticatable
  def ensure_authentication_token; end
  def generate_authentication_token(token_generator); end
  def token_generator; end
  def token_suitable?(token); end
  extend ActiveSupport::Concern
end
module SimpleTokenAuthentication::ActsAsTokenAuthenticatable::ClassMethods
  def acts_as_token_authenticatable(options = nil); end
end
class SimpleTokenAuthentication::Entity
  def get_identifier_from_params_or_headers(controller); end
  def get_token_from_params_or_headers(controller); end
  def identifier; end
  def identifier_header_name; end
  def identifier_param_name; end
  def initialize(model, model_alias = nil); end
  def model; end
  def name; end
  def name_underscore; end
  def token_header_name; end
  def token_param_name; end
end
class SimpleTokenAuthentication::EntitiesManager
  def find_or_create_entity(model, model_alias = nil); end
end
class SimpleTokenAuthentication::DeviseFallbackHandler
  def authenticate_entity!(controller, entity); end
  def fallback!(controller, entity); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class SimpleTokenAuthentication::ExceptionFallbackHandler
  def fallback!(controller, entity); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class SimpleTokenAuthentication::SignInHandler
  def integrate_with_devise_trackable!(controller); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def sign_in(controller, record, *args); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class SimpleTokenAuthentication::TokenComparator
  def compare(a, b); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module SimpleTokenAuthentication::TokenAuthenticationHandler
  def after_successful_token_authentication; end
  def authenticate_entity_from_token!(entity); end
  def fallback!(entity, fallback_handler); end
  def find_record_from_identifier(entity); end
  def integrate_with_devise_case_insensitive_keys(identifier_value, entity); end
  def perform_sign_in!(record, sign_in_handler); end
  def sign_in_handler; end
  def token_comparator; end
  def token_correct?(record, entity, token_comparator); end
  extend ActiveSupport::Concern
end
module SimpleTokenAuthentication::TokenAuthenticationHandler::ClassMethods
  def define_token_authentication_helpers_for(entity, fallback_handler); end
  def entities_manager; end
  def fallback_handler(options); end
  def handle_token_authentication_for(model, options = nil); end
  def set_token_authentication_hooks(entity, options); end
end
module SimpleTokenAuthentication::ActsAsTokenAuthenticationHandler
  def acts_as_token_authentication_handler; end
  def acts_as_token_authentication_handler_for(model, options = nil); end
end
module SimpleTokenAuthentication::Configuration
  def adapters_dependencies; end
  def adapters_dependencies=(obj); end
  def configure; end
  def controller_adapters; end
  def controller_adapters=(obj); end
  def fallback; end
  def header_names; end
  def header_names=(obj); end
  def identifiers; end
  def identifiers=(obj); end
  def model_adapters; end
  def model_adapters=(obj); end
  def parse_options(options); end
  def self.adapters_dependencies; end
  def self.adapters_dependencies=(obj); end
  def self.controller_adapters; end
  def self.controller_adapters=(obj); end
  def self.fallback; end
  def self.header_names; end
  def self.header_names=(obj); end
  def self.identifiers; end
  def self.identifiers=(obj); end
  def self.model_adapters; end
  def self.model_adapters=(obj); end
  def self.sign_in_token; end
  def self.sign_in_token=(obj); end
  def self.skip_devise_trackable; end
  def self.skip_devise_trackable=(obj); end
  def sign_in_token; end
  def sign_in_token=(obj); end
  def skip_devise_trackable; end
  def skip_devise_trackable=(obj); end
end
class SimpleTokenAuthentication::NoAdapterAvailableError < LoadError
  def to_s; end
end
class SimpleTokenAuthentication::InvalidOptionValue < RuntimeError
end
module SimpleTokenAuthentication::Adapter
  def base_class; end
end
module SimpleTokenAuthentication::Adapters
end
class SimpleTokenAuthentication::Adapters::ActiveRecordAdapter
  def self.base_class; end
  extend SimpleTokenAuthentication::Adapter
end
class SimpleTokenAuthentication::Adapters::RailsMetalAdapter
  def self.base_class; end
  extend SimpleTokenAuthentication::Adapter
end
class ActiveRecord::Base
  def generate_authentication_token(token_generator); end
  def token_generator; end
  def token_suitable?(token); end
  extend SimpleTokenAuthentication::ActsAsTokenAuthenticatable::ClassMethods
  include SimpleTokenAuthentication::ActsAsTokenAuthenticatable
end
class ActionController::Metal < AbstractController::Base
  extend SimpleTokenAuthentication::ActsAsTokenAuthenticationHandler
end
