# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rdf-aggregate-repo` gem.
# Please instead update this file by running `bin/tapioca gem rdf-aggregate-repo`.

module RDF
  class << self
    def Graph(**options, &block); end
    def List(*args); end
    def Literal(literal, **options); end
    def Node(*args); end
    def Resource(*args); end
    def Statement(*args, **options); end
    def StrictVocabulary(uri); end
    def URI(*args); end
    def Vocabulary(uri); end
    def [](property); end
    def config; end
    def enum_for(method = T.unsafe(nil), *args); end
    def method_missing(property, *args, &block); end
    def respond_to?(method, include_all = T.unsafe(nil)); end
    def to_enum(method = T.unsafe(nil), *args); end
  end
end

class RDF::AggregateRepo < ::RDF::Dataset
  def initialize(*queryable, &block); end

  def add(queryable); end
  def count; end
  def default(*names); end
  def default_graph; end
  def defaults; end
  def durable?; end
  def each(&block); end
  def each_graph(&block); end
  def each_statement(&block); end
  def empty?; end
  def has_graph?(value); end
  def has_statement?(statement); end
  def named(name); end
  def source(queryable); end
  def sources; end
  def supports?(feature); end
  def writable?; end

  protected

  def query_pattern(pattern, **options, &block); end
end

module RDF::AggregateRepo::VERSION
  class << self
    def to_a; end
    def to_s; end
    def to_str; end
  end
end

RDF::AggregateRepo::VERSION::MAJOR = T.let(T.unsafe(nil), String)
RDF::AggregateRepo::VERSION::MINOR = T.let(T.unsafe(nil), String)
RDF::AggregateRepo::VERSION::STRING = T.let(T.unsafe(nil), String)
RDF::AggregateRepo::VERSION::TINY = T.let(T.unsafe(nil), String)
RDF::AggregateRepo::VERSION::VERSION_FILE = T.let(T.unsafe(nil), String)
RDF::IRI = RDF::URI

class RDF::MergeGraph
  include ::RDF::Value
  include ::Enumerable
  include ::RDF::Countable
  include ::RDF::Enumerable
  include ::RDF::Queryable

  def initialize(graph_name: T.unsafe(nil), name: T.unsafe(nil), &block); end

  def add(queryable, graph_name); end
  def count; end
  def durable?; end
  def each(&block); end
  def each_graph(&block); end
  def empty?; end
  def graph?; end
  def graph_name; end
  def has_graph?(value); end
  def has_statement?(statement); end
  def name(name); end
  def named?; end
  def source(queryable, graph_name); end
  def sources; end
  def unnamed?; end
  def writable?; end

  protected

  def query_pattern(pattern, **options, &block); end
end

class RDF::OWL < ::RDF::StrictVocabulary
  class << self
    def AllDifferent; end
    def AllDisjointClasses; end
    def AllDisjointProperties; end
    def Annotation; end
    def AnnotationProperty; end
    def AsymmetricProperty; end
    def Axiom; end
    def Class; end
    def DataRange; end
    def DatatypeProperty; end
    def DeprecatedClass; end
    def DeprecatedProperty; end
    def FunctionalProperty; end
    def InverseFunctionalProperty; end
    def IrreflexiveProperty; end
    def NamedIndividual; end
    def NegativePropertyAssertion; end
    def Nothing; end
    def ObjectProperty; end
    def Ontology; end
    def OntologyProperty; end
    def ReflexiveProperty; end
    def Restriction; end
    def SymmetricProperty; end
    def Thing; end
    def TransitiveProperty; end
    def allValuesFrom; end
    def annotatedProperty; end
    def annotatedSource; end
    def annotatedTarget; end
    def assertionProperty; end
    def backwardCompatibleWith; end
    def bottomDataProperty; end
    def bottomObjectProperty; end
    def cardinality; end
    def complementOf; end
    def datatypeComplementOf; end
    def deprecated; end
    def differentFrom; end
    def disjointUnionOf; end
    def disjointWith; end
    def distinctMembers; end
    def equivalentClass; end
    def equivalentProperty; end
    def hasKey; end
    def hasSelf; end
    def hasValue; end
    def imports; end
    def incompatibleWith; end
    def intersectionOf; end
    def inverseOf; end
    def maxCardinality; end
    def maxQualifiedCardinality; end
    def members; end
    def minCardinality; end
    def minQualifiedCardinality; end
    def onClass; end
    def onDataRange; end
    def onDatatype; end
    def onProperties; end
    def onProperty; end
    def oneOf; end
    def priorVersion; end
    def propertyChainAxiom; end
    def propertyDisjointWith; end
    def qualifiedCardinality; end
    def sameAs; end
    def someValuesFrom; end
    def sourceIndividual; end
    def targetIndividual; end
    def targetValue; end
    def topDataProperty; end
    def topObjectProperty; end
    def unionOf; end
    def versionIRI; end
    def versionInfo; end
    def withRestrictions; end
  end
end

class RDF::RDFS < ::RDF::StrictVocabulary
  class << self
    def Class; end
    def Container; end
    def ContainerMembershipProperty; end
    def Datatype; end
    def Literal; end
    def Resource; end
    def comment; end
    def domain; end
    def isDefinedBy; end
    def label; end
    def member; end
    def range; end
    def seeAlso; end
    def subClassOf; end
    def subPropertyOf; end
  end
end

class RDF::RDFV < ::RDF::StrictVocabulary
  class << self
    def Alt; end
    def Bag; end
    def CompoundLiteral; end
    def Description; end
    def HTML; end
    def ID; end
    def JSON; end
    def List; end
    def PlainLiteral; end
    def Property; end
    def Seq; end
    def Statement; end
    def XMLLiteral; end
    def __name__; end
    def about; end
    def datatype; end
    def direction; end
    def first; end
    def langString; end
    def language; end
    def li; end
    def name; end
    def nil; end
    def nodeID; end
    def object; end
    def parseType; end
    def predicate; end
    def resource; end
    def rest; end
    def subject; end
    def type; end
    def value; end
  end
end

RDF::RDF_N_REGEXP = T.let(T.unsafe(nil), Regexp)
RDF::VOCABS = T.let(T.unsafe(nil), Hash)

class RDF::XSD < ::RDF::Vocabulary
  class << self
    def ENTITIES; end
    def ENTITY; end
    def ID; end
    def IDREF; end
    def IDREFS; end
    def NCName; end
    def NMTOKEN; end
    def NMTOKENS; end
    def NOTATION; end
    def Name; end
    def QName; end
    def anyAtomicType; end
    def anySimpleType; end
    def anyType; end
    def anyURI; end
    def base64Binary; end
    def boolean; end
    def byte; end
    def date; end
    def dateTime; end
    def dateTimeStamp; end
    def dayTimeDuration; end
    def decimal; end
    def double; end
    def duration; end
    def float; end
    def gDay; end
    def gMonth; end
    def gMonthDay; end
    def gYear; end
    def gYearMonth; end
    def hexBinary; end
    def int; end
    def integer; end
    def language; end
    def long; end
    def negativeInteger; end
    def nonNegativeInteger; end
    def nonPositiveInteger; end
    def normalizedString; end
    def positiveInteger; end
    def short; end
    def string; end
    def time; end
    def token; end
    def unsignedByte; end
    def unsignedInt; end
    def unsignedLong; end
    def unsignedShort; end
    def yearMonthDuration; end
  end
end
