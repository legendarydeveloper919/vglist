# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `database_cleaner` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module DatabaseCleaner

  private

  def called_externally?(file, caller); end
  def deprecate(message); end

  class << self
    def [](*args, &block); end
    def add_cleaner(*args, &block); end
    def allow_production; end
    def allow_production=(_arg0); end
    def allow_remote_database_url; end
    def allow_remote_database_url=(_arg0); end
    def app_root(*args, &block); end
    def app_root=(*args, &block); end
    def called_externally?(file, caller); end
    def can_detect_orm?; end
    def clean(*args, &block); end
    def clean!(*args, &block); end
    def clean_with(*args, &block); end
    def clean_with!(*args, &block); end
    def cleaners(*args, &block); end
    def cleaners=(*args, &block); end
    def cleaning(*args, &block); end
    def connections(*args, &block); end
    def deprecate(message); end
    def init_cleaners(*args, &block); end
    def logger(*args, &block); end
    def logger=(*args, &block); end
    def orm=(*args, &block); end
    def remove_duplicates(*args, &block); end
    def start(*args, &block); end
    def strategy=(*args, &block); end
    def url_whitelist; end
    def url_whitelist=(_arg0); end

    private

    def configuration; end
  end
end

class DatabaseCleaner::Base
  include(::Comparable)
  extend(::Forwardable)

  def initialize(desired_orm = T.unsafe(nil), opts = T.unsafe(nil)); end

  def <=>(other); end
  def auto_detected?; end
  def autodetect_orm; end
  def clean(*args, &block); end
  def clean!; end
  def clean_with(*args); end
  def clean_with!; end
  def cleaning(*args, &block); end
  def create_strategy(*args); end
  def db; end
  def db=(desired_db); end
  def orm; end
  def orm=(desired_orm); end
  def set_strategy_db(strategy, desired_db); end
  def start(*args, &block); end
  def strategy; end
  def strategy=(args); end
  def strategy_db=(desired_db); end

  private

  def adapter_loaded?(orm); end
  def load_adapter(orm); end
  def orm_module; end
  def orm_strategy(strategy); end
  def require_orm_strategy(orm, strategy); end
end

class DatabaseCleaner::Cleaners < ::Hash
  def [](orm, opts = T.unsafe(nil)); end
  def add_cleaner(orm, opts = T.unsafe(nil)); end
  def orm=(orm); end
  def remove_duplicates; end
  def strategy=(strategy); end
end

class DatabaseCleaner::Configuration
  extend(::Forwardable)

  def initialize; end

  def [](*args, &block); end
  def add_cleaner(orm, opts = T.unsafe(nil)); end
  def app_root; end
  def app_root=(value); end
  def clean; end
  def clean!; end
  def clean_with(*args); end
  def clean_with!(*args); end
  def cleaners; end
  def cleaners=(_arg0); end
  def cleaning(&inner_block); end
  def connections; end
  def init_cleaners; end
  def logger; end
  def logger=(value); end
  def orm=(*args, &block); end
  def remove_duplicates; end
  def start; end
  def strategy=(*args, &block); end
end

class DatabaseCleaner::Deprecator
  def initialize; end

  def deprecate(method, message); end
end

class DatabaseCleaner::NoORMDetected < ::StandardError
end

class DatabaseCleaner::NullStrategy
  def clean; end
  def cleaning(&block); end
  def db=(connection); end
  def start; end
end

class DatabaseCleaner::Safeguard
  def run; end
end

DatabaseCleaner::Safeguard::CHECKS = T.let(T.unsafe(nil), Array)

class DatabaseCleaner::Safeguard::Error < ::Exception
end

class DatabaseCleaner::Safeguard::Error::NotWhitelistedUrl < ::DatabaseCleaner::Safeguard::Error
  def initialize; end
end

class DatabaseCleaner::Safeguard::Error::ProductionEnv < ::DatabaseCleaner::Safeguard::Error
  def initialize(env); end
end

class DatabaseCleaner::Safeguard::Error::RemoteDatabaseUrl < ::DatabaseCleaner::Safeguard::Error
  def initialize; end
end

class DatabaseCleaner::Safeguard::Production
  def run; end

  private

  def given?; end
  def key; end
  def skip?; end
end

DatabaseCleaner::Safeguard::Production::KEYS = T.let(T.unsafe(nil), Array)

class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  def run; end

  private

  def given?; end
  def remote?(url); end
  def skip?; end
end

DatabaseCleaner::Safeguard::RemoteDatabaseUrl::LOCAL = T.let(T.unsafe(nil), Array)

class DatabaseCleaner::Safeguard::WhitelistedUrl
  def run; end

  private

  def database_url_not_whitelisted?; end
  def skip?; end
end

class DatabaseCleaner::UnknownStrategySpecified < ::ArgumentError
end

DatabaseCleaner::VERSION = T.let(T.unsafe(nil), String)

DatabaseCleaner::ORMAutodetector::ORMS = T.let(T.unsafe(nil), Hash)
