# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rdf-xsd/all/rdf-xsd.rbi
#
# rdf-xsd-3.1.0

module RDF
end
class RDF::Literal
end
class RDF::Literal::DateTimeStamp < RDF::Literal::DateTime
end
class RDF::Literal::YearMonth < RDF::Literal::Date
  def initialize(value, datatype: nil, lexical: nil, **options); end
end
class RDF::Literal::Year < RDF::Literal::Date
  def initialize(value, datatype: nil, lexical: nil, **options); end
end
class RDF::Literal::MonthDay < RDF::Literal::Date
  def initialize(value, datatype: nil, lexical: nil, **options); end
end
class RDF::Literal::Day < RDF::Literal::Date
  def initialize(value, datatype: nil, lexical: nil, **options); end
end
class RDF::Literal::Month < RDF::Literal::Date
  def initialize(value, datatype: nil, lexical: nil, **options); end
end
class RDF::Literal::Float < RDF::Literal::Double
end
module Nokogiri::XML
end
class Nokogiri::XML::Node
  def c14nxl(options = nil); end
  def to_s_with_c14nxl; end
  def to_s_without_c14nxl; end
end
class Nokogiri::XML::Element < Nokogiri::XML::Node
  def c14nxl(options = nil); end
end
class Nokogiri::XML::NodeSet
  def c14nxl(options = nil); end
  def to_s_with_c14nxl; end
  def to_s_without_c14nxl; end
end
class Nokogiri::XML::Document < Nokogiri::XML::Node
  def doctype; end
end
class Array
  def c14nxl(options = nil); end
  def to_s_with_c14nxl; end
  def to_s_without_c14nxl(format = nil); end
end
class REXML::Element < REXML::Parent
  def c14nxl(options = nil); end
end
class RDF::Literal::NonPositiveInteger < RDF::Literal::Integer
  def -@; end
  def valid?; end
end
class RDF::Literal::NegativeInteger < RDF::Literal::NonPositiveInteger
  def -@; end
  def valid?; end
end
class RDF::Literal::Long < RDF::Literal::Integer
  def valid?; end
end
class RDF::Literal::Int < RDF::Literal::Long
  def valid?; end
end
class RDF::Literal::Short < RDF::Literal::Int
  def valid?; end
end
class RDF::Literal::Byte < RDF::Literal::Short
  def valid?; end
end
class RDF::Literal::NonNegativeInteger < RDF::Literal::Integer
  def valid?; end
end
class RDF::Literal::PositiveInteger < RDF::Literal::NonNegativeInteger
  def valid?; end
end
class RDF::Literal::UnsignedLong < RDF::Literal::NonNegativeInteger
  def valid?; end
end
class RDF::Literal::UnsignedInt < RDF::Literal::UnsignedLong
  def valid?; end
end
class RDF::Literal::UnsignedShort < RDF::Literal::UnsignedInt
  def valid?; end
end
class RDF::Literal::UnsignedByte < RDF::Literal::UnsignedShort
  def valid?; end
end
class RDF::Literal::XML < RDF::Literal
  def eql?(other); end
  def equivalent_nokogiri(other); end
  def equivalent_rexml(other); end
  def initialize(value, datatype: nil, lexical: nil, **options); end
  def object; end
  def parse_nokogiri(value); end
  def parse_rexml(value); end
  def to_s; end
end
class RDF::Literal::HTML < RDF::Literal::XML
end
class RDF::Literal::AnyURI < RDF::Literal
  def canonicalize!; end
  def initialize(value, datatype: nil, lexical: nil, **options); end
  def valid?; end
end
class RDF::Literal::Duration < RDF::Literal
  def ==(other); end
  def canonicalize!; end
  def humanize(lang = nil); end
  def initialize(value, datatype: nil, lexical: nil, **options); end
  def parse(value); end
  def plural(v, str); end
  def sec_str; end
  def to_f; end
  def to_i; end
  def to_s; end
  def valid?; end
end
class RDF::Literal::DayTimeDuration < RDF::Literal
end
class RDF::Literal::YearMonthDuration < RDF::Literal
end
module RDF::XSD::VERSION
  def self.to_a; end
  def self.to_s; end
  def self.to_str; end
end
class RDF::Literal::HexBinary < RDF::Literal
  def bin_to_hex(value); end
  def canonicalize!; end
  def hex_to_bin(value); end
  def initialize(value, datatype: nil, lexical: nil, **options); end
  def to_s; end
end
class RDF::Literal::Base64Binary < RDF::Literal
  def canonicalize!; end
  def initialize(value, datatype: nil, lexical: nil, **options); end
  def to_s; end
  def valid?; end
end
