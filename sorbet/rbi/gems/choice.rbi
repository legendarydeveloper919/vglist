# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/choice/all/choice.rbi
#
# choice-0.2.0

module Choice
  def [](choice); end
  def args; end
  def args=(args); end
  def args_of(opt); end
  def banner(string = nil); end
  def choices; end
  def dont_exit_on_help=(val); end
  def exit_on_help?; end
  def footer(string = nil); end
  def header(string = nil); end
  def help; end
  def option(opt, options = nil, &block); end
  def options(hash = nil, &block); end
  def options_from_hash(options_hash); end
  def output_to(target = nil); end
  def parse; end
  def parsed?; end
  def reset!; end
  def rest; end
  def separator(str); end
  extend Choice
end
class Choice::Option
  def desc(string = nil); end
  def desc?; end
  def initialize(options = nil, &block); end
  def method_missing(method, *args, &block); end
  def to_a; end
  def to_h; end
end
class Choice::Option::ParseError < Exception
end
module Choice::Parser
  def arrayize_arguments(args); end
  def make_validation(validation); end
  def parse(options, args); end
  extend Choice::Parser
end
class Choice::Parser::ParseError < Exception
end
class Choice::Parser::HashExpectedForOption < Exception
end
class Choice::Parser::UnknownOption < Choice::Parser::ParseError
end
class Choice::Parser::ArgumentRequired < Choice::Parser::ParseError
end
class Choice::Parser::ValidateExpectsRegexpOrBlock < Choice::Parser::ParseError
end
class Choice::Parser::ArgumentValidationFails < Choice::Parser::ParseError
end
class Choice::Parser::InvalidArgument < Choice::Parser::ParseError
end
class Choice::Parser::ArgumentRequiredWithValid < Choice::Parser::ParseError
end
module Choice::Writer
  def self.banner(banner, options); end
  def self.footer(footer); end
  def self.header(header); end
  def self.help(args, target = nil, dont_exit = nil); end
  def self.option_line(option); end
  def self.options(options); end
  def self.print(str); end
  def self.printf(format, *args); end
  def self.program; end
  def self.puts(str = nil); end
  def self.target; end
  def self.target=(target); end
  def self.usage(options); end
end
class Choice::LazyHash < Hash
  def [](key); end
  def []=(key, value); end
  def fetch(key); end
  def initialize(hash = nil); end
  def method_missing(meth, *args); end
  def old_fetch(*arg0); end
  def old_store(arg0, arg1); end
  def store(key, value); end
end
class Hash
  def to_lazyhash; end
end
