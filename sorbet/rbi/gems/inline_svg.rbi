# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/inline_svg/all/inline_svg.rbi
#
# inline_svg-1.6.0
module InlineSvg
  def self.configuration; end
  def self.configure; end
  def self.reset_configuration!; end
end
module InlineSvg::ActionView
end
module InlineSvg::ActionView::Helpers
  def configured_asset_file; end
  def extension_hint(filename); end
  def inline_svg(filename, transform_params = nil); end
  def inline_svg_pack_tag(filename, transform_params = nil); end
  def inline_svg_tag(filename, transform_params = nil); end
  def placeholder(filename); end
  def read_svg(filename); end
  def render_inline_svg(filename, transform_params = nil); end
  def with_asset_finder(asset_finder); end
end
class InlineSvg::AssetFile
  def self.named(filename); end
end
class InlineSvg::AssetFile::FileNotFound < IOError
end
class InlineSvg::CachedAssetFile
  def all_keys_matching(asset_name); end
  def assets; end
  def filters; end
  def initialize(paths: nil, filters: nil); end
  def key_for_asset(asset_name); end
  def matches_all_filters?(path); end
  def named(asset_name); end
  def paths; end
  def read_assets(acc, paths); end
end
class InlineSvg::FindsAssetPaths
  def self.by_filename(filename); end
  def self.configured_asset_finder; end
end
class InlineSvg::StaticAssetFinder
  def initialize(filename); end
  def pathname; end
  def self.find_asset(filename); end
end
class InlineSvg::WebpackAssetFinder
  def initialize(filename); end
  def pathname; end
  def self.find_asset(filename); end
end
class InlineSvg::IdGenerator
  def self.generate(base, salt, randomness: nil); end
end
class InlineSvg::IdGenerator::Randomness
  def self.call; end
end
module InlineSvg::TransformPipeline::Transformations
  def self.all_default_values; end
  def self.all_transformations; end
  def self.built_in_transformations; end
  def self.custom_transformations; end
  def self.in_priority_order(transforms); end
  def self.lookup(transform_params); end
  def self.magnify(priority = nil); end
  def self.magnify_priorities(transforms); end
  def self.no_transform; end
  def self.params_with_defaults(params); end
  def self.without_empty_values(params); end
end
class InlineSvg::TransformPipeline::Transformations::Transformation
  def initialize(value); end
  def self.create_with_value(value); end
  def transform(*arg0); end
  def value; end
  def with_svg(doc); end
end
class InlineSvg::TransformPipeline::Transformations::NullTransformation < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::CustomTransformation < InlineSvg::TransformPipeline::Transformations::Transformation
end
module InlineSvg::TransformPipeline
  def self.generate_html_from(svg_file, transform_params); end
end
class InlineSvg::TransformPipeline::Transformations::NoComment < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::ClassAttribute < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::StyleAttribute < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::Title < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::Description < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::Size < InlineSvg::TransformPipeline::Transformations::Transformation
  def height_of(value); end
  def transform(doc); end
  def width_of(value); end
end
class InlineSvg::TransformPipeline::Transformations::Height < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::Width < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::IdAttribute < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::DataAttributes < InlineSvg::TransformPipeline::Transformations::Transformation
  def dasherize(string); end
  def transform(doc); end
  def with_valid_hash_from(hash); end
end
class InlineSvg::TransformPipeline::Transformations::PreserveAspectRatio < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::AriaAttributes < InlineSvg::TransformPipeline::Transformations::Transformation
  def element_id_for(base, element); end
  def transform(doc); end
end
class InlineSvg::TransformPipeline::Transformations::AriaHiddenAttribute < InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end
module InlineSvg::IOResource
  def self.===(object); end
  def self.default_for(object); end
  def self.read(object); end
end
class InlineSvg::Railtie < Rails::Railtie
end
class InlineSvg::Configuration
  def add_custom_transformation(options); end
  def asset_file; end
  def asset_file=(custom_asset_file); end
  def asset_finder; end
  def asset_finder=(finder); end
  def custom_transformations; end
  def incompatible_transformation?(klass); end
  def initialize; end
  def raise_on_file_not_found=(value); end
  def raise_on_file_not_found?; end
  def svg_not_found_css_class; end
  def svg_not_found_css_class=(css_class); end
end
class InlineSvg::Configuration::Invalid < ArgumentError
end
