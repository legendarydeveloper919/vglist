# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `excon` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Excon
  class << self
    def connect(url, params = T.unsafe(nil), &block); end
    def defaults; end
    def defaults=(new_defaults); end
    def delete(url, params = T.unsafe(nil), &block); end
    def display_warning(warning); end
    def get(url, params = T.unsafe(nil), &block); end
    def head(url, params = T.unsafe(nil), &block); end
    def mock; end
    def mock=(new_mock); end
    def new(url, params = T.unsafe(nil)); end
    def options(url, params = T.unsafe(nil), &block); end
    def patch(url, params = T.unsafe(nil), &block); end
    def post(url, params = T.unsafe(nil), &block); end
    def put(url, params = T.unsafe(nil), &block); end
    def set_raise_on_warnings!(should_raise); end
    def ssl_ca_path; end
    def ssl_ca_path=(new_ssl_ca_path); end
    def ssl_verify_peer; end
    def ssl_verify_peer=(new_ssl_verify_peer); end
    def stub(request_params = T.unsafe(nil), response_params = T.unsafe(nil), &block); end
    def stub_for(request_params = T.unsafe(nil)); end
    def stubs; end
    def trace(url, params = T.unsafe(nil), &block); end
    def unstub(request_params = T.unsafe(nil)); end
  end
end

Excon::CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

Excon::CR_NL = T.let(T.unsafe(nil), String)

class Excon::Connection
  include(::Excon::Utils)

  def initialize(params = T.unsafe(nil)); end

  def batch_requests(pipeline_params, limit = T.unsafe(nil)); end
  def connect(params = T.unsafe(nil), &block); end
  def connection; end
  def connection=(new_params); end
  def data; end
  def delete(params = T.unsafe(nil), &block); end
  def error_call(datum); end
  def get(params = T.unsafe(nil), &block); end
  def head(params = T.unsafe(nil), &block); end
  def inspect; end
  def logger; end
  def logger=(logger); end
  def options(params = T.unsafe(nil), &block); end
  def params; end
  def params=(new_params); end
  def patch(params = T.unsafe(nil), &block); end
  def post(params = T.unsafe(nil), &block); end
  def proxy; end
  def proxy=(new_proxy); end
  def put(params = T.unsafe(nil), &block); end
  def request(params = T.unsafe(nil), &block); end
  def request_call(datum); end
  def requests(pipeline_params); end
  def reset; end
  def response_call(datum); end
  def retry_limit; end
  def retry_limit=(new_retry_limit); end
  def trace(params = T.unsafe(nil), &block); end
  def valid_request_keys(middlewares); end

  private

  def detect_content_length(body); end
  def proxy_from_env; end
  def proxy_match_host_port(host, port); end
  def raise_socket_error(error); end
  def response(datum = T.unsafe(nil)); end
  def setup_proxy; end
  def socket; end
  def sockets; end
  def valid_middleware_keys(middlewares); end
  def validate_params(validation, params, middlewares); end
end

Excon::DEFAULTS = T.let(T.unsafe(nil), Hash)

Excon::DEFAULT_CA_FILE = T.let(T.unsafe(nil), String)

Excon::DEFAULT_CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

Excon::DEFAULT_REDIRECT_LIMIT = T.let(T.unsafe(nil), Integer)

Excon::DEFAULT_RETRY_ERRORS = T.let(T.unsafe(nil), Array)

Excon::DEFAULT_RETRY_LIMIT = T.let(T.unsafe(nil), Integer)

Excon::DEPRECATED_VALID_REQUEST_KEYS = T.let(T.unsafe(nil), Hash)

class Excon::Error < ::StandardError
  class << self
    def status_error(request, response); end
    def status_errors; end
  end
end

class Excon::Error::Accepted < ::Excon::Error::Success
end

class Excon::Error::BadGateway < ::Excon::Error::Server
end

class Excon::Error::BadRequest < ::Excon::Error::Client
end

class Excon::Error::Certificate < ::Excon::Error::Socket
  def initialize(socket_error = T.unsafe(nil)); end
end

class Excon::Error::Client < ::Excon::Error::HTTPStatus
end

class Excon::Error::Conflict < ::Excon::Error::Client
end

class Excon::Error::Continue < ::Excon::Error::Informational
end

class Excon::Error::Created < ::Excon::Error::Success
end

class Excon::Error::ExpectationFailed < ::Excon::Error::Client
end

class Excon::Error::Forbidden < ::Excon::Error::Client
end

class Excon::Error::Found < ::Excon::Error::Redirection
end

class Excon::Error::GatewayTimeout < ::Excon::Error::Server
end

class Excon::Error::Gone < ::Excon::Error::Client
end

class Excon::Error::HTTPStatus < ::Excon::Error
  def initialize(msg, request = T.unsafe(nil), response = T.unsafe(nil)); end

  def request; end
  def response; end
end

class Excon::Error::Informational < ::Excon::Error::HTTPStatus
end

class Excon::Error::InternalServerError < ::Excon::Error::Server
end

class Excon::Error::InvalidHeaderKey < ::Excon::Error
end

class Excon::Error::InvalidHeaderValue < ::Excon::Error
end

class Excon::Error::InvalidStub < ::Excon::Error
end

class Excon::Error::LengthRequired < ::Excon::Error::Client
end

class Excon::Error::MethodNotAllowed < ::Excon::Error::Client
end

class Excon::Error::MovedPermanently < ::Excon::Error::Redirection
end

class Excon::Error::MultipleChoices < ::Excon::Error::Redirection
end

class Excon::Error::NoContent < ::Excon::Error::Success
end

class Excon::Error::NonAuthoritativeInformation < ::Excon::Error::Success
end

class Excon::Error::NotAcceptable < ::Excon::Error::Client
end

class Excon::Error::NotFound < ::Excon::Error::Client
end

class Excon::Error::NotImplemented < ::Excon::Error::Server
end

class Excon::Error::NotModified < ::Excon::Error::Redirection
end

class Excon::Error::OK < ::Excon::Error::Success
end

class Excon::Error::PartialContent < ::Excon::Error::Success
end

class Excon::Error::PaymentRequired < ::Excon::Error::Client
end

class Excon::Error::PreconditionFailed < ::Excon::Error::Client
end

class Excon::Error::ProxyAuthenticationRequired < ::Excon::Error::Client
end

class Excon::Error::ProxyConnectionError < ::Excon::Error
  def initialize(msg, request = T.unsafe(nil), response = T.unsafe(nil)); end

  def request; end
  def response; end
end

class Excon::Error::ProxyParse < ::Excon::Error
end

class Excon::Error::Redirection < ::Excon::Error::HTTPStatus
end

class Excon::Error::RequestEntityTooLarge < ::Excon::Error::Client
end

class Excon::Error::RequestTimeout < ::Excon::Error::Client
end

class Excon::Error::RequestURITooLong < ::Excon::Error::Client
end

class Excon::Error::RequestedRangeNotSatisfiable < ::Excon::Error::Client
end

class Excon::Error::ResetContent < ::Excon::Error::Success
end

class Excon::Error::ResponseParse < ::Excon::Error
end

class Excon::Error::SeeOther < ::Excon::Error::Redirection
end

class Excon::Error::Server < ::Excon::Error::HTTPStatus
end

class Excon::Error::ServiceUnavailable < ::Excon::Error::Server
end

class Excon::Error::Socket < ::Excon::Error
  def initialize(socket_error = T.unsafe(nil)); end

  def socket_error; end
end

class Excon::Error::StubNotFound < ::Excon::Error
end

class Excon::Error::Success < ::Excon::Error::HTTPStatus
end

class Excon::Error::SwitchingProtocols < ::Excon::Error::Informational
end

class Excon::Error::TemporaryRedirect < ::Excon::Error::Redirection
end

class Excon::Error::Timeout < ::Excon::Error
end

class Excon::Error::TooManyRedirects < ::Excon::Error
end

class Excon::Error::TooManyRequests < ::Excon::Error::Client
end

class Excon::Error::Unauthorized < ::Excon::Error::Client
end

class Excon::Error::UnprocessableEntity < ::Excon::Error::Client
end

class Excon::Error::UnsupportedMediaType < ::Excon::Error::Client
end

class Excon::Error::UseProxy < ::Excon::Error::Redirection
end

class Excon::Error::Warning < ::Excon::Error
end

module Excon::Errors
  class << self
    def status_error(request, response); end
  end
end

Excon::Errors::Accepted = Excon::Error::Accepted

Excon::Errors::BadGateway = Excon::Error::BadGateway

Excon::Errors::BadRequest = Excon::Error::BadRequest

Excon::Errors::CertificateError = Excon::Error::Certificate

Excon::Errors::ClientError = Excon::Error::Client

Excon::Errors::Conflict = Excon::Error::Conflict

Excon::Errors::Continue = Excon::Error::Continue

Excon::Errors::Created = Excon::Error::Created

Excon::Errors::Error = Excon::Error

Excon::Errors::ExpectationFailed = Excon::Error::ExpectationFailed

Excon::Errors::Forbidden = Excon::Error::Forbidden

Excon::Errors::Found = Excon::Error::Found

Excon::Errors::GatewayTimeout = Excon::Error::GatewayTimeout

Excon::Errors::Gone = Excon::Error::Gone

Excon::Errors::HTTPStatusError = Excon::Error::HTTPStatus

Excon::Errors::Informational = Excon::Error::Informational

Excon::Errors::InternalServerError = Excon::Error::InternalServerError

Excon::Errors::InvalidHeaderKey = Excon::Error::InvalidHeaderKey

Excon::Errors::InvalidHeaderValue = Excon::Error::InvalidHeaderValue

Excon::Errors::InvalidStub = Excon::Error::InvalidStub

Excon::Errors::LengthRequired = Excon::Error::LengthRequired

Excon::Errors::MethodNotAllowed = Excon::Error::MethodNotAllowed

Excon::Errors::MovedPermanently = Excon::Error::MovedPermanently

Excon::Errors::MultipleChoices = Excon::Error::MultipleChoices

Excon::Errors::NoContent = Excon::Error::NoContent

Excon::Errors::NonAuthoritativeInformation = Excon::Error::NonAuthoritativeInformation

Excon::Errors::NotAcceptable = Excon::Error::NotAcceptable

Excon::Errors::NotFound = Excon::Error::NotFound

Excon::Errors::NotImplemented = Excon::Error::NotImplemented

Excon::Errors::NotModified = Excon::Error::NotModified

Excon::Errors::OK = Excon::Error::OK

Excon::Errors::PartialContent = Excon::Error::PartialContent

Excon::Errors::PaymentRequired = Excon::Error::PaymentRequired

Excon::Errors::PreconditionFailed = Excon::Error::PreconditionFailed

Excon::Errors::ProxyAuthenticationRequired = Excon::Error::ProxyAuthenticationRequired

Excon::Errors::ProxyConnectionError = Excon::Error::ProxyConnectionError

Excon::Errors::ProxyParse = Excon::Error::ProxyParse

Excon::Errors::Redirection = Excon::Error::Redirection

Excon::Errors::RequestEntityTooLarge = Excon::Error::RequestEntityTooLarge

Excon::Errors::RequestTimeout = Excon::Error::RequestTimeout

Excon::Errors::RequestURITooLong = Excon::Error::RequestURITooLong

Excon::Errors::RequestedRangeNotSatisfiable = Excon::Error::RequestedRangeNotSatisfiable

Excon::Errors::ResetContent = Excon::Error::ResetContent

Excon::Errors::ResponseParse = Excon::Error::ResponseParse

Excon::Errors::SeeOther = Excon::Error::SeeOther

Excon::Errors::ServerError = Excon::Error::Server

Excon::Errors::ServiceUnavailable = Excon::Error::ServiceUnavailable

Excon::Errors::SocketError = Excon::Error::Socket

Excon::Errors::StubNotFound = Excon::Error::StubNotFound

Excon::Errors::Success = Excon::Error::Success

Excon::Errors::SwitchingProtocols = Excon::Error::SwitchingProtocols

Excon::Errors::TemporaryRedirect = Excon::Error::TemporaryRedirect

Excon::Errors::Timeout = Excon::Error::Timeout

Excon::Errors::TooManyRedirects = Excon::Error::TooManyRedirects

Excon::Errors::TooManyRequests = Excon::Error::TooManyRequests

Excon::Errors::Unauthorized = Excon::Error::Unauthorized

Excon::Errors::UnprocessableEntity = Excon::Error::UnprocessableEntity

Excon::Errors::UnsupportedMediaType = Excon::Error::UnsupportedMediaType

Excon::Errors::UseProxy = Excon::Error::UseProxy

Excon::Errors::Warning = Excon::Error::Warning

Excon::FORCE_ENC = T.let(T.unsafe(nil), TrueClass)

Excon::HTTPS = T.let(T.unsafe(nil), String)

Excon::HTTP_1_1 = T.let(T.unsafe(nil), String)

Excon::HTTP_VERBS = T.let(T.unsafe(nil), Array)

class Excon::Headers < ::Hash
  def initialize; end

  def [](key); end
  def []=(key, value); end
  def assoc(obj); end
  def delete(key, &proc); end
  def fetch(key, default = T.unsafe(nil), &proc); end
  def has_key?(key); end
  def key?(key); end
  def member?(key); end
  def merge(other_hash); end
  def merge!(other_hash); end
  def raw_assoc(_arg0); end
  def raw_delete(_arg0); end
  def raw_fetch(*_arg0); end
  def raw_has_key?(_arg0); end
  def raw_include?(_arg0); end
  def raw_key?(_arg0); end
  def raw_member?(_arg0); end
  def raw_merge(*_arg0); end
  def raw_merge!(*_arg0); end
  def raw_reader(_arg0); end
  def raw_rehash; end
  def raw_store(_arg0, _arg1); end
  def raw_values_at(*_arg0); end
  def raw_writer(_arg0, _arg1); end
  def rehash; end
  def store(key, value); end
  def values_at(*keys); end
end

Excon::Headers::SENTINEL = T.let(T.unsafe(nil), Hash)

class Excon::LoggingInstrumentor
  class << self
    def instrument(name, params = T.unsafe(nil)); end
  end
end

module Excon::Middleware
end

class Excon::Middleware::Base
  def initialize(stack); end

  def error_call(datum); end
  def request_call(datum); end
  def response_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::CaptureCookies < ::Excon::Middleware::Base
  def extract_cookies_from_set_cookie(set_cookie); end
  def get_header(datum, header); end
  def response_call(datum); end
end

class Excon::Middleware::Decompress < ::Excon::Middleware::Base
  def request_call(datum); end
  def response_call(datum); end
end

class Excon::Middleware::EscapePath < ::Excon::Middleware::Base
  def request_call(datum); end
end

class Excon::Middleware::Expects < ::Excon::Middleware::Base
  def response_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::Idempotent < ::Excon::Middleware::Base
  def error_call(datum); end
  def request_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::Instrumentor < ::Excon::Middleware::Base
  def error_call(datum); end
  def request_call(datum); end
  def response_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::Mock < ::Excon::Middleware::Base
  def request_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::RedirectFollower < ::Excon::Middleware::Base
  def get_header(datum, header); end
  def request_call(datum); end
  def response_call(datum); end

  class << self
    def valid_parameter_keys; end
  end
end

class Excon::Middleware::ResponseParser < ::Excon::Middleware::Base
  def response_call(datum); end
end

Excon::NO_ENTITY = T.let(T.unsafe(nil), Array)

class Excon::PrettyPrinter
  class << self
    def pp(io, datum, indent = T.unsafe(nil)); end
  end
end

Excon::REDACTED = T.let(T.unsafe(nil), String)

class Excon::Response
  def initialize(params = T.unsafe(nil)); end

  def [](key); end
  def body; end
  def body=(new_body); end
  def data; end
  def data=(_arg0); end
  def get_header(name); end
  def headers; end
  def headers=(new_headers); end
  def host; end
  def local_address; end
  def local_port; end
  def params; end
  def path; end
  def port; end
  def pp; end
  def reason_phrase; end
  def reason_phrase=(new_reason_phrase); end
  def remote_ip; end
  def remote_ip=(new_remote_ip); end
  def status; end
  def status=(new_status); end
  def status_line; end
  def status_line=(new_status_line); end

  class << self
    def parse(socket, datum); end
    def parse_headers(socket, datum); end
  end
end

class Excon::SSLSocket < ::Excon::Socket
  def initialize(data = T.unsafe(nil)); end


  private

  def client_cert_data; end
  def client_key_data; end
  def client_key_pass; end
  def connect; end
end

Excon::SSLSocket::HAVE_NONBLOCK = T.let(T.unsafe(nil), TrueClass)

class Excon::Socket
  include(::Excon::Utils)
  extend(::Forwardable)

  def initialize(data = T.unsafe(nil)); end

  def close(*args, &block); end
  def data; end
  def data=(_arg0); end
  def legacy_readline; end
  def local_address; end
  def local_port; end
  def params; end
  def params=(new_params); end
  def read(max_length = T.unsafe(nil)); end
  def readline; end
  def remote_ip; end
  def write(data); end

  private

  def connect; end
  def read_block(max_length); end
  def read_nonblock(max_length); end
  def select_with_timeout(socket, type); end
  def unpacked_sockaddr; end
  def write_block(data); end
  def write_nonblock(data); end
end

Excon::Socket::CONNECT_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

Excon::Socket::READ_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

Excon::Socket::WRITE_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

class Excon::StandardInstrumentor
  class << self
    def instrument(name, params = T.unsafe(nil)); end
  end
end

Excon::UNIX = T.let(T.unsafe(nil), String)

Excon::USER_AGENT = T.let(T.unsafe(nil), String)

class Excon::UnixSocket < ::Excon::Socket

  private

  def connect; end
end

module Excon::Utils
  extend(::Excon::Utils)

  def binary_encode(string); end
  def connection_uri(datum = T.unsafe(nil)); end
  def escape_uri(str); end
  def port_string(datum); end
  def query_string(datum); end
  def redact(datum); end
  def request_uri(datum); end
  def split_header_value(str); end
  def unescape_form(str); end
  def unescape_uri(str); end
end

Excon::Utils::CONTROL = T.let(T.unsafe(nil), String)

Excon::Utils::DELIMS = T.let(T.unsafe(nil), String)

Excon::Utils::ESCAPED = T.let(T.unsafe(nil), Regexp)

Excon::Utils::NONASCII = T.let(T.unsafe(nil), String)

Excon::Utils::UNESCAPED = T.let(T.unsafe(nil), Regexp)

Excon::Utils::UNWISE = T.let(T.unsafe(nil), String)

Excon::VALID_CONNECTION_KEYS = T.let(T.unsafe(nil), Array)

Excon::VALID_REQUEST_KEYS = T.let(T.unsafe(nil), Array)

Excon::VERSION = T.let(T.unsafe(nil), String)

Excon::VERSIONS = T.let(T.unsafe(nil), String)
