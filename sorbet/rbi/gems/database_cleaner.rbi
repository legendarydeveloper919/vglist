# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/database_cleaner/all/database_cleaner.rbi
#
# database_cleaner-1.7.0
module DatabaseCleaner
  def self.[](orm, opts = nil); end
  def self.add_cleaner(orm, opts = nil); end
  def self.allow_production; end
  def self.allow_production=(arg0); end
  def self.allow_remote_database_url; end
  def self.allow_remote_database_url=(arg0); end
  def self.app_root; end
  def self.app_root=(desired_root); end
  def self.can_detect_orm?; end
  def self.clean!; end
  def self.clean; end
  def self.clean_with!(*args); end
  def self.clean_with(*args); end
  def self.cleaning(&inner_block); end
  def self.connections; end
  def self.init_cleaners; end
  def self.logger; end
  def self.logger=(log_source); end
  def self.orm=(orm); end
  def self.orm_module(symbol); end
  def self.remove_duplicates; end
  def self.start; end
  def self.strategy=(stratagem); end
end
class DatabaseCleaner::NullStrategy
  def self.clean; end
  def self.cleaning(&block); end
  def self.db=(connection); end
  def self.start; end
end
class DatabaseCleaner::Safeguard
  def run; end
end
class DatabaseCleaner::Safeguard::Error < Exception
end
class DatabaseCleaner::Safeguard::Error::RemoteDatabaseUrl < DatabaseCleaner::Safeguard::Error
  def initialize; end
end
class DatabaseCleaner::Safeguard::Error::ProductionEnv < DatabaseCleaner::Safeguard::Error
  def initialize(env); end
end
class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  def given?; end
  def remote?(url); end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Safeguard::Production
  def given?; end
  def key; end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Base
  def <=>(other); end
  def auto_detected?; end
  def autodetect; end
  def autodetect_orm; end
  def clean!; end
  def clean; end
  def clean_with!(*args); end
  def clean_with(*args); end
  def cleaning(&block); end
  def create_strategy(*args); end
  def db; end
  def db=(desired_db); end
  def initialize(desired_orm = nil, opts = nil); end
  def orm; end
  def orm=(desired_orm); end
  def orm_module; end
  def orm_strategy(strategy); end
  def set_default_orm_strategy; end
  def set_strategy_db(strategy, desired_db); end
  def start; end
  def strategy; end
  def strategy=(args); end
  def strategy_db=(desired_db); end
  include Comparable
end
class DatabaseCleaner::NoORMDetected < StandardError
end
class DatabaseCleaner::UnknownStrategySpecified < ArgumentError
end
module DatabaseCleaner::Generic
end
module DatabaseCleaner::Generic::Base
  def cleaning(&block); end
  def db; end
  def self.included(base); end
end
module DatabaseCleaner::Generic::Base::ClassMethods
  def available_strategies; end
end
module DatabaseCleaner::ActiveRecord
  def self.available_strategies; end
  def self.config_file_location; end
  def self.config_file_location=(path); end
end
module DatabaseCleaner::ActiveRecord::Base
  def connection_class; end
  def connection_hash; end
  def connection_hash=(arg0); end
  def db; end
  def db=(desired_db); end
  def establish_connection; end
  def load_config; end
  def lookup_from_connection_pool; end
  def self.exclusion_condition(column_name); end
  def self.migration_table_name; end
  def valid_config(connection_file); end
  extend DatabaseCleaner::Generic::Base::ClassMethods
  include DatabaseCleaner::Generic::Base
end
module DatabaseCleaner::Generic::Transaction
  def initialize(opts = nil); end
end
class DatabaseCleaner::ActiveRecord::Transaction
  def clean; end
  def connection_maintains_transaction_count?; end
  def start; end
  include DatabaseCleaner::ActiveRecord::Base
  include DatabaseCleaner::Generic::Transaction
end
module DatabaseCleaner::Generic::Truncation
  def clean; end
  def initialize(opts = nil); end
  def migration_storage_names; end
  def start; end
  def tables_to_truncate; end
end
module DatabaseCleaner::ConnectionAdapters
end
module DatabaseCleaner::ConnectionAdapters::AbstractAdapter
  def database_cleaner_table_cache; end
  def database_cleaner_view_cache; end
  def truncate_table(table_name); end
  def truncate_tables(tables); end
end
module DatabaseCleaner::ConnectionAdapters::AbstractMysqlAdapter
  def has_been_used?(table); end
  def has_rows?(table); end
  def pre_count_truncate_tables(tables, options = nil); end
  def row_count(table); end
  def truncate_table(table_name); end
  def truncate_tables(tables); end
end
module DatabaseCleaner::ConnectionAdapters::IBM_DBAdapter
  def truncate_table(table_name); end
end
module DatabaseCleaner::ConnectionAdapters::SQLiteAdapter
  def delete_table(table_name); end
  def truncate_table(table_name); end
  def truncate_tables(tables); end
  def uses_sequence; end
end
module DatabaseCleaner::ConnectionAdapters::TruncateOrDelete
  def truncate_table(table_name); end
end
module DatabaseCleaner::ConnectionAdapters::OracleAdapter
  def truncate_table(table_name); end
end
module DatabaseCleaner::ConnectionAdapters::PostgreSQLAdapter
  def cascade; end
  def database_cleaner_table_cache; end
  def db_version; end
  def has_been_used?(table); end
  def has_rows?(table); end
  def has_sequence?(table); end
  def pre_count_truncate_tables(tables, options = nil); end
  def restart_identity; end
  def tables_with_schema; end
  def truncate_table(table_name); end
  def truncate_tables(table_names); end
end
module ActiveRecord
end
module ActiveRecord::ConnectionAdapters
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include DatabaseCleaner::ConnectionAdapters::AbstractAdapter
end
class ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter < ActiveRecord::ConnectionAdapters::AbstractAdapter
  include DatabaseCleaner::ConnectionAdapters::AbstractMysqlAdapter
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter < ActiveRecord::ConnectionAdapters::AbstractAdapter
  include DatabaseCleaner::ConnectionAdapters::PostgreSQLAdapter
end
class DatabaseCleaner::ActiveRecord::Truncation
  def cache_tables?; end
  def clean; end
  def migration_storage_names; end
  def pre_count?; end
  def reset_ids?; end
  def tables_to_truncate(connection); end
  include DatabaseCleaner::ActiveRecord::Base
  include DatabaseCleaner::Generic::Truncation
end
