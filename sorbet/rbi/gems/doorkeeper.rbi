# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/doorkeeper/all/doorkeeper.rbi
#
# doorkeeper-5.4.0

module Doorkeeper
  def self.authenticate(request, methods = nil); end
  def self.config; end
  def self.configuration; end
  def self.configure(&block); end
  def self.setup_application_owner; end
  def self.setup_orm_adapter; end
  def self.setup_orm_models; end
end
class Doorkeeper::Config
  def access_grant_class(*_args); end
  def access_grant_model; end
  def access_token_class(*_args); end
  def access_token_expires_in(*_args); end
  def access_token_generator(*_args); end
  def access_token_methods; end
  def access_token_model; end
  def active_record_options(*_args); end
  def after_successful_authorization(*_args); end
  def after_successful_strategy_response(*_args); end
  def allow_blank_redirect_uri(*_args); end
  def allow_blank_redirect_uri?(application = nil); end
  def allow_grant_flow_for_client(*_args); end
  def allow_grant_flow_for_client?(grant_flow, client); end
  def allow_token_introspection(*_args); end
  def api_only; end
  def application_class(*_args); end
  def application_model; end
  def application_secret_fallback_strategy; end
  def application_secret_hashed?; end
  def application_secret_strategy; end
  def authenticate_admin(*_args); end
  def authenticate_resource_owner(*_args); end
  def authorization_code_expires_in(*_args); end
  def authorization_response_types; end
  def authorize_resource_owner_for_client(*_args); end
  def base_controller(*_args); end
  def base_metal_controller(*_args); end
  def before_successful_authorization(*_args); end
  def before_successful_strategy_response(*_args); end
  def builder_class; end
  def calculate_authorization_response_types; end
  def calculate_token_grant_types; end
  def client_credentials_methods; end
  def confirm_application_owner?; end
  def custom_access_token_expires_in(*_args); end
  def custom_introspection_response(*_args); end
  def default_generator_method(*_args); end
  def default_scopes; end
  def enable_application_owner?; end
  def enforce_configured_scopes?; end
  def enforce_content_type; end
  def forbid_redirect_uri(*_args); end
  def force_ssl_in_redirect_uri(*_args); end
  def grant_flows(*_args); end
  def handle_auth_errors(*_args); end
  def native_redirect_uri(*_args); end
  def option_defined?(name); end
  def option_set?(instance_key); end
  def optional_scopes; end
  def orm(*_args); end
  def polymorphic_resource_owner?; end
  def raise_on_errors?; end
  def realm(*_args); end
  def refresh_token_enabled?; end
  def resolve_controller(name); end
  def resource_owner_from_credentials(*_args); end
  def reuse_access_token; end
  def revoke_previous_client_credentials_token?; end
  def scopes; end
  def scopes_by_grant_type; end
  def self.builder_class; end
  def skip_authorization(*_args); end
  def token_grant_types; end
  def token_lookup_batch_size(*_args); end
  def token_reuse_limit(*_args); end
  def token_secret_fallback_strategy; end
  def token_secret_strategy; end
  def validate!; end
  def validate_reuse_access_token_value; end
  def validate_secret_strategies; end
  def validate_token_reuse_limit; end
  extend Doorkeeper::Config::Option
end
module Doorkeeper::Config::Option
  def option(name, options = nil); end
  def self.extended(base); end
end
class Doorkeeper::Config::AbstractBuilder
  def build; end
  def config; end
  def initialize(config = nil, &block); end
end
class Doorkeeper::MissingConfiguration < StandardError
  def initialize; end
end
class Doorkeeper::MissingConfigurationBuilderClass < StandardError
end
class Doorkeeper::Config::Builder < Doorkeeper::Config::AbstractBuilder
  def access_grant_class(*args, &block); end
  def access_token_class(*args, &block); end
  def access_token_expires_in(*args, &block); end
  def access_token_generator(*args, &block); end
  def access_token_methods(*methods); end
  def active_record_options(*args, &block); end
  def admin_authenticator(*args, &block); end
  def after_successful_authorization(*args, &block); end
  def after_successful_strategy_response(*args, &block); end
  def allow_blank_redirect_uri(*args, &block); end
  def allow_grant_flow_for_client(*args, &block); end
  def allow_token_introspection(*args, &block); end
  def api_only; end
  def application_class(*args, &block); end
  def authorization_code_expires_in(*args, &block); end
  def authorize_resource_owner_for_client(*args, &block); end
  def base_controller(*args, &block); end
  def base_metal_controller(*args, &block); end
  def before_successful_authorization(*args, &block); end
  def before_successful_strategy_response(*args, &block); end
  def client_credentials(*methods); end
  def configure_secrets_for(type, using:, fallback:); end
  def confirm_application_owner; end
  def custom_access_token_expires_in(*args, &block); end
  def custom_introspection_response(*args, &block); end
  def default_generator_method(*args, &block); end
  def default_scopes(*scopes); end
  def enable_application_owner(opts = nil); end
  def enforce_configured_scopes; end
  def enforce_content_type; end
  def forbid_redirect_uri(*args, &block); end
  def force_ssl_in_redirect_uri(*args, &block); end
  def grant_flows(*args, &block); end
  def handle_auth_errors(*args, &block); end
  def hash_application_secrets(using: nil, fallback: nil); end
  def hash_token_secrets(using: nil, fallback: nil); end
  def native_redirect_uri(*args, &block); end
  def optional_scopes(*scopes); end
  def orm(*args, &block); end
  def realm(*args, &block); end
  def resource_owner_authenticator(*args, &block); end
  def resource_owner_from_credentials(*args, &block); end
  def reuse_access_token; end
  def revoke_previous_client_credentials_token; end
  def scopes_by_grant_type(hash = nil); end
  def skip_authorization(*args, &block); end
  def token_lookup_batch_size(*args, &block); end
  def token_reuse_limit(*args, &block); end
  def use_polymorphic_resource_owner; end
  def use_refresh_token(enabled = nil, &block); end
end
class Doorkeeper::Engine < Rails::Engine
end
module Doorkeeper::Request
  def self.authorization_strategy(response_type); end
  def self.build_strategy_class(grant_or_request_type); end
  def self.get_strategy(grant_type, available); end
  def self.token_grant_types; end
  def self.token_strategy(grant_type); end
end
module Doorkeeper::OAuth
end
class Doorkeeper::OAuth::Client
  def application; end
  def id(*args, &block); end
  def initialize(application); end
  def name(*args, &block); end
  def redirect_uri(*args, &block); end
  def scopes(*args, &block); end
  def self.authenticate(credentials, method = nil); end
  def self.find(uid, method = nil); end
  def uid(*args, &block); end
end
module Doorkeeper::Helpers
end
module Doorkeeper::OAuth::Authorization
end
module Doorkeeper::OAuth::ClientCredentials
end
module Doorkeeper::OAuth::Helpers
end
module Doorkeeper::OAuth::Hooks
end
module Doorkeeper::Models
end
module Doorkeeper::Orm
end
module Doorkeeper::Rails
end
module Doorkeeper::SecretStoring
end
class Doorkeeper::SecretStoring::Base
  def self.allows_restoring_secrets?; end
  def self.restore_secret(_resource, _attribute); end
  def self.secret_matches?(input, stored); end
  def self.store_secret(resource, attribute, plain_secret); end
  def self.transform_secret(_plain_secret); end
  def self.validate_for(model); end
end
class Doorkeeper::SecretStoring::BCrypt < Doorkeeper::SecretStoring::Base
  def self.allows_restoring_secrets?; end
  def self.bcrypt_present?; end
  def self.secret_matches?(input, stored); end
  def self.transform_secret(plain_secret); end
  def self.validate_for(model); end
end
class Doorkeeper::OAuth::Scopes
  def &(other); end
  def +(other); end
  def <=>(other); end
  def add(*scopes); end
  def all; end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def exists?(scope); end
  def has_scopes?(scopes); end
  def initialize; end
  def scopes?(scopes); end
  def self.from_array(array); end
  def self.from_string(string); end
  def to_array(other); end
  def to_s; end
  include Comparable
  include Enumerable
end
class Doorkeeper::SecretStoring::Plain < Doorkeeper::SecretStoring::Base
  def self.allows_restoring_secrets?; end
  def self.restore_secret(resource, attribute); end
  def self.transform_secret(plain_secret); end
end
module Doorkeeper::Orm::ActiveRecord
  def self.initialize_application_owner!; end
  def self.initialize_models!; end
  def self.lazy_load(&block); end
  def self.models; end
end
class Doorkeeper::Orm::ActiveRecord::StaleRecordsCleaner
  def clean_expired(ttl); end
  def clean_revoked; end
  def initialize(base_scope); end
end
module Doorkeeper::Orm::ActiveRecord::Mixins
end
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant
  extend ActiveSupport::Concern
end
module Doorkeeper::Models::Expirable
  def expired?; end
  def expires_at; end
  def expires_in_seconds; end
end
module Doorkeeper::Models::Revocable
  def revoke(clock = nil); end
  def revoked?; end
end
module Doorkeeper::Models::Accessible
  def accessible?; end
end
module Doorkeeper::Models::Orderable
  extend ActiveSupport::Concern
end
module Doorkeeper::Models::Orderable::ClassMethods
  def ordered_by(attribute, direction = nil); end
end
module Doorkeeper::Models::SecretStorable
  def fallback_secret_strategy(*args, &block); end
  def secret_strategy(*args, &block); end
  extend ActiveSupport::Concern
end
module Doorkeeper::Models::SecretStorable::ClassMethods
  def fallback_secret_strategy; end
  def find_by_fallback_token(attr, plain_secret); end
  def find_by_plaintext_token(attr, token); end
  def secret_matches?(*args, &block); end
  def secret_strategy; end
  def upgrade_fallback_value(instance, attr, plain_secret); end
end
module Doorkeeper::Models::Scopes
  def includes_scope?(*required_scopes); end
  def scopes; end
  def scopes=(value); end
  def scopes_string; end
end
module Doorkeeper::Models::ResourceOwnerable
  extend ActiveSupport::Concern
end
module Doorkeeper::Models::ResourceOwnerable::ClassMethods
  def by_resource_owner(resource_owner); end
  def resource_owner_id_for(resource_owner); end
end
module Doorkeeper::AccessGrantMixin
  def uses_pkce?; end
  extend ActiveSupport::Concern
  include Doorkeeper::Models::Accessible
  include Doorkeeper::Models::Expirable
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::ResourceOwnerable
  include Doorkeeper::Models::Revocable
  include Doorkeeper::Models::Scopes
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::OAuth::Helpers
end
module Doorkeeper::AccessGrantMixin::ClassMethods
  def by_token(token); end
  def fallback_secret_strategy; end
  def generate_code_challenge(code_verifier); end
  def pkce_supported?; end
  def revoke_all_for(application_id, resource_owner, clock = nil); end
  def secret_strategy; end
end
module Doorkeeper::AccessGrant::GeneratedAttributeMethods
end
class Doorkeeper::AccessGrant < ActiveRecord::Base
  def autosave_associated_records_for_application(*args); end
  def generate_token; end
  def plaintext_token; end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.page(num = nil); end
  extend Doorkeeper::AccessGrantMixin::ClassMethods
  extend Doorkeeper::Models::Orderable::ClassMethods
  extend Doorkeeper::Models::ResourceOwnerable::ClassMethods
  extend Doorkeeper::Models::SecretStorable::ClassMethods
  extend Kaminari::ConfigurationMethods::ClassMethods
  include Doorkeeper::AccessGrant::GeneratedAssociationMethods
  include Doorkeeper::AccessGrant::GeneratedAttributeMethods
  include Doorkeeper::AccessGrantMixin
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::ResourceOwnerable
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
end
module Doorkeeper::AccessGrant::GeneratedAssociationMethods
  def application; end
  def application=(value); end
  def build_application(*args, &block); end
  def create_application!(*args, &block); end
  def create_application(*args, &block); end
  def reload_application; end
end
class Doorkeeper::AccessGrant::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessGrant::GeneratedRelationMethods
end
module Doorkeeper::AccessGrant::GeneratedRelationMethods
end
class Doorkeeper::AccessGrant::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessGrant::GeneratedRelationMethods
end
class Doorkeeper::AccessGrant::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessGrant::GeneratedRelationMethods
end
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken
  extend ActiveSupport::Concern
end
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken::ClassMethods
  def active_for(resource_owner); end
  def refresh_token_revoked_on_use?; end
end
module Doorkeeper::Models::Reusable
  def reusable?; end
end
module Doorkeeper::AccessTokenMixin
  def acceptable?(scopes); end
  def as_json(_options = nil); end
  def attributes_for_token_generator; end
  def generate_refresh_token; end
  def generate_token; end
  def old_refresh_token; end
  def plaintext_refresh_token; end
  def plaintext_token; end
  def revoke_previous_refresh_token!; end
  def same_credential?(access_token); end
  def same_resource_owner?(access_token); end
  def token_generator; end
  def token_type; end
  def use_refresh_token?; end
  extend ActiveSupport::Concern
  include Doorkeeper::Models::Accessible
  include Doorkeeper::Models::Expirable
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::ResourceOwnerable
  include Doorkeeper::Models::Reusable
  include Doorkeeper::Models::Revocable
  include Doorkeeper::Models::Scopes
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::OAuth::Helpers
end
module Doorkeeper::AccessTokenMixin::ClassMethods
  def authorized_tokens_for(application_id, resource_owner); end
  def by_previous_refresh_token(previous_refresh_token); end
  def by_refresh_token(refresh_token); end
  def by_token(token); end
  def create_for(application:, resource_owner:, scopes:, **token_attributes); end
  def fallback_secret_strategy; end
  def find_access_token_in_batches(relation, *args, &block); end
  def find_matching_token(relation, application, scopes); end
  def find_or_create_for(application:, resource_owner:, scopes:, **token_attributes); end
  def last_authorized_token_for(application_id, resource_owner); end
  def matching_token_for(application, resource_owner, scopes); end
  def revoke_all_for(application_id, resource_owner, clock = nil); end
  def scopes_match?(token_scopes, param_scopes, app_scopes); end
  def secret_strategy; end
end
module Doorkeeper::AccessToken::GeneratedAttributeMethods
end
class Doorkeeper::AccessToken < ActiveRecord::Base
  def autosave_associated_records_for_application(*args); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.page(num = nil); end
  def use_refresh_token=(arg0); end
  extend Doorkeeper::AccessTokenMixin::ClassMethods
  extend Doorkeeper::Models::Orderable::ClassMethods
  extend Doorkeeper::Models::ResourceOwnerable::ClassMethods
  extend Doorkeeper::Models::SecretStorable::ClassMethods
  extend Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken::ClassMethods
  extend Kaminari::ConfigurationMethods::ClassMethods
  include Doorkeeper::AccessToken::GeneratedAssociationMethods
  include Doorkeeper::AccessToken::GeneratedAttributeMethods
  include Doorkeeper::AccessTokenMixin
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::ResourceOwnerable
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
end
module Doorkeeper::AccessToken::GeneratedAssociationMethods
  def application; end
  def application=(value); end
  def build_application(*args, &block); end
  def create_application!(*args, &block); end
  def create_application(*args, &block); end
  def reload_application; end
end
class Doorkeeper::AccessToken::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessToken::GeneratedRelationMethods
end
module Doorkeeper::AccessToken::GeneratedRelationMethods
end
class Doorkeeper::AccessToken::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessToken::GeneratedRelationMethods
end
class Doorkeeper::AccessToken::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::AccessToken::GeneratedRelationMethods
end
class Doorkeeper::RedirectUriValidator < ActiveModel::EachValidator
  def forbidden_uri?(uri); end
  def invalid_ssl_uri?(uri); end
  def oob_redirect_uri?(uri); end
  def relative_uri?(uri); end
  def unspecified_scheme?(uri); end
  def validate_each(record, attribute, value); end
end
module Doorkeeper::Orm::ActiveRecord::Mixins::Application
  extend ActiveSupport::Concern
end
module Doorkeeper::Orm::ActiveRecord::Mixins::Application::ClassMethods
  def authorized_for(resource_owner); end
  def revoke_tokens_and_grants_for(id, resource_owner); end
end
module Doorkeeper::ApplicationMixin
  def redirect_uri=(uris); end
  def secret_matches?(input); end
  extend ActiveSupport::Concern
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::Scopes
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::OAuth::Helpers
end
module Doorkeeper::ApplicationMixin::ClassMethods
  def by_uid(uid); end
  def by_uid_and_secret(uid, secret); end
  def fallback_secret_strategy; end
  def secret_strategy; end
end
module Doorkeeper::Application::GeneratedAttributeMethods
end
class Doorkeeper::Application < ActiveRecord::Base
  def after_add_for_access_grants; end
  def after_add_for_access_grants=(val); end
  def after_add_for_access_grants?; end
  def after_add_for_access_tokens; end
  def after_add_for_access_tokens=(val); end
  def after_add_for_access_tokens?; end
  def after_add_for_authorized_applications; end
  def after_add_for_authorized_applications=(val); end
  def after_add_for_authorized_applications?; end
  def after_add_for_authorized_tokens; end
  def after_add_for_authorized_tokens=(val); end
  def after_add_for_authorized_tokens?; end
  def after_remove_for_access_grants; end
  def after_remove_for_access_grants=(val); end
  def after_remove_for_access_grants?; end
  def after_remove_for_access_tokens; end
  def after_remove_for_access_tokens=(val); end
  def after_remove_for_access_tokens?; end
  def after_remove_for_authorized_applications; end
  def after_remove_for_authorized_applications=(val); end
  def after_remove_for_authorized_applications?; end
  def after_remove_for_authorized_tokens; end
  def after_remove_for_authorized_tokens=(val); end
  def after_remove_for_authorized_tokens?; end
  def as_json(options = nil); end
  def authorized_for_resource_owner?(resource_owner); end
  def autosave_associated_records_for_access_grants(*args); end
  def autosave_associated_records_for_access_tokens(*args); end
  def autosave_associated_records_for_authorized_applications(*args); end
  def autosave_associated_records_for_authorized_tokens(*args); end
  def before_add_for_access_grants; end
  def before_add_for_access_grants=(val); end
  def before_add_for_access_grants?; end
  def before_add_for_access_tokens; end
  def before_add_for_access_tokens=(val); end
  def before_add_for_access_tokens?; end
  def before_add_for_authorized_applications; end
  def before_add_for_authorized_applications=(val); end
  def before_add_for_authorized_applications?; end
  def before_add_for_authorized_tokens; end
  def before_add_for_authorized_tokens=(val); end
  def before_add_for_authorized_tokens?; end
  def before_remove_for_access_grants; end
  def before_remove_for_access_grants=(val); end
  def before_remove_for_access_grants?; end
  def before_remove_for_access_tokens; end
  def before_remove_for_access_tokens=(val); end
  def before_remove_for_access_tokens?; end
  def before_remove_for_authorized_applications; end
  def before_remove_for_authorized_applications=(val); end
  def before_remove_for_authorized_applications?; end
  def before_remove_for_authorized_tokens; end
  def before_remove_for_authorized_tokens=(val); end
  def before_remove_for_authorized_tokens?; end
  def enforce_scopes?; end
  def extract_serializable_attributes(options = nil); end
  def generate_secret; end
  def generate_uid; end
  def plaintext_secret; end
  def read_attribute_for_serialization(key); end
  def renew_secret; end
  def scopes_match_configured; end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.after_add_for_access_grants; end
  def self.after_add_for_access_grants=(val); end
  def self.after_add_for_access_grants?; end
  def self.after_add_for_access_tokens; end
  def self.after_add_for_access_tokens=(val); end
  def self.after_add_for_access_tokens?; end
  def self.after_add_for_authorized_applications; end
  def self.after_add_for_authorized_applications=(val); end
  def self.after_add_for_authorized_applications?; end
  def self.after_add_for_authorized_tokens; end
  def self.after_add_for_authorized_tokens=(val); end
  def self.after_add_for_authorized_tokens?; end
  def self.after_remove_for_access_grants; end
  def self.after_remove_for_access_grants=(val); end
  def self.after_remove_for_access_grants?; end
  def self.after_remove_for_access_tokens; end
  def self.after_remove_for_access_tokens=(val); end
  def self.after_remove_for_access_tokens?; end
  def self.after_remove_for_authorized_applications; end
  def self.after_remove_for_authorized_applications=(val); end
  def self.after_remove_for_authorized_applications?; end
  def self.after_remove_for_authorized_tokens; end
  def self.after_remove_for_authorized_tokens=(val); end
  def self.after_remove_for_authorized_tokens?; end
  def self.attribute_type_decorations; end
  def self.before_add_for_access_grants; end
  def self.before_add_for_access_grants=(val); end
  def self.before_add_for_access_grants?; end
  def self.before_add_for_access_tokens; end
  def self.before_add_for_access_tokens=(val); end
  def self.before_add_for_access_tokens?; end
  def self.before_add_for_authorized_applications; end
  def self.before_add_for_authorized_applications=(val); end
  def self.before_add_for_authorized_applications?; end
  def self.before_add_for_authorized_tokens; end
  def self.before_add_for_authorized_tokens=(val); end
  def self.before_add_for_authorized_tokens?; end
  def self.before_remove_for_access_grants; end
  def self.before_remove_for_access_grants=(val); end
  def self.before_remove_for_access_grants?; end
  def self.before_remove_for_access_tokens; end
  def self.before_remove_for_access_tokens=(val); end
  def self.before_remove_for_access_tokens?; end
  def self.before_remove_for_authorized_applications; end
  def self.before_remove_for_authorized_applications=(val); end
  def self.before_remove_for_authorized_applications?; end
  def self.before_remove_for_authorized_tokens; end
  def self.before_remove_for_authorized_tokens=(val); end
  def self.before_remove_for_authorized_tokens?; end
  def self.defined_enums; end
  def self.page(num = nil); end
  def serializable_attributes; end
  def validate_associated_records_for_access_grants(*args); end
  def validate_associated_records_for_access_tokens(*args); end
  def validate_associated_records_for_authorized_applications(*args); end
  def validate_associated_records_for_authorized_tokens(*args); end
  extend Doorkeeper::ApplicationMixin::ClassMethods
  extend Doorkeeper::Models::Orderable::ClassMethods
  extend Doorkeeper::Models::SecretStorable::ClassMethods
  extend Doorkeeper::Orm::ActiveRecord::Mixins::Application::ClassMethods
  extend Kaminari::ConfigurationMethods::ClassMethods
  include Doorkeeper::Application::GeneratedAssociationMethods
  include Doorkeeper::Application::GeneratedAttributeMethods
  include Doorkeeper::ApplicationMixin
  include Doorkeeper::Models::Orderable
  include Doorkeeper::Models::SecretStorable
  include Doorkeeper::Orm::ActiveRecord::Mixins::Application
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
end
module Doorkeeper::Application::GeneratedAssociationMethods
  def access_grant_ids; end
  def access_grant_ids=(ids); end
  def access_grants; end
  def access_grants=(value); end
  def access_token_ids; end
  def access_token_ids=(ids); end
  def access_tokens; end
  def access_tokens=(value); end
  def authorized_application_ids; end
  def authorized_application_ids=(ids); end
  def authorized_applications; end
  def authorized_applications=(value); end
  def authorized_token_ids; end
  def authorized_token_ids=(ids); end
  def authorized_tokens; end
  def authorized_tokens=(value); end
end
class Doorkeeper::Application::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::Application::GeneratedRelationMethods
end
module Doorkeeper::Application::GeneratedRelationMethods
end
class Doorkeeper::Application::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::Application::GeneratedRelationMethods
end
class Doorkeeper::Application::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Doorkeeper::Application::GeneratedRelationMethods
end
module Doorkeeper::Models::Ownership
  def validate_owner?; end
  extend ActiveSupport::Concern
end
class Doorkeeper::Rails::Routes
  def application_routes(mapping); end
  def authorization_routes(mapping); end
  def authorized_applications_routes(mapping); end
  def generate_routes!(options); end
  def initialize(routes, mapper = nil, &block); end
  def introspect_routes(mapping); end
  def mapping; end
  def revoke_routes(mapping); end
  def self.install!; end
  def self.mapping; end
  def token_info_routes(mapping); end
  def token_routes(mapping); end
  extend Doorkeeper::Rails::Routes::Registry
  include Doorkeeper::Rails::AbstractRouter
end
class Doorkeeper::Rails::Routes::Mapping
  def [](routes); end
  def as; end
  def as=(arg0); end
  def controllers; end
  def controllers=(arg0); end
  def initialize; end
  def skipped?(controller); end
  def skips; end
  def skips=(arg0); end
end
class Doorkeeper::Rails::Routes::Mapper
  def as(alias_names = nil); end
  def controllers(controller_names = nil); end
  def initialize(mapping = nil); end
  def map(&block); end
  def skip_controllers(*controller_names); end
end
module Doorkeeper::Rails::AbstractRouter
  def generate_routes!(**_options); end
  def initialize(routes, mapper = nil, &block); end
  def map_route(name, method); end
  def routes; end
  extend ActiveSupport::Concern
end
module Doorkeeper::Rails::Routes::Registry
  def register(routes); end
  def register_routes(routes); end
  def registered_routes; end
end
class Doorkeeper::Rails::Routes::Registry::InvalidRouterClass < StandardError
end
module Doorkeeper::Rails::Routes::Helper
  def use_doorkeeper(options = nil, &block); end
end
module Doorkeeper::Rails::Helpers
  def doorkeeper_authorize!(*scopes); end
  def doorkeeper_error; end
  def doorkeeper_forbidden_render_options(**arg0); end
  def doorkeeper_invalid_token_response?; end
  def doorkeeper_render_error; end
  def doorkeeper_render_error_with(error); end
  def doorkeeper_render_options(error); end
  def doorkeeper_status_for_error(error, respond_not_found_when_forbidden); end
  def doorkeeper_token; end
  def doorkeeper_unauthorized_render_options(**arg0); end
  def valid_doorkeeper_token?; end
end
module Doorkeeper::DashboardHelper
  def doorkeeper_errors_for(object, method); end
  def doorkeeper_submit_path(application); end
end
module Doorkeeper::Helpers::Controller
  def authenticate_admin!; end
  def authenticate_resource_owner!; end
  def config_methods; end
  def current_resource_owner; end
  def doorkeeper_token; end
  def enforce_content_type; end
  def get_error_response_from_exception(exception); end
  def handle_token_exception(exception); end
  def resource_owner_from_credentials; end
  def server; end
  def skip_authorization?; end
  def x_www_form_urlencoded?; end
end
class Doorkeeper::ApplicationController < ApplicationController
  def _layout(lookup_context, formats); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_59
  include Doorkeeper::Helpers::Controller
end
module Anonymous_Module_59
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::ApplicationsController < Doorkeeper::ApplicationController
  def _layout(lookup_context, formats); end
  def application_params; end
  def create; end
  def destroy; end
  def edit; end
  def i18n_scope(action); end
  def index; end
  def new; end
  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def set_application; end
  def show; end
  def update; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_60
end
module Anonymous_Module_60
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::AuthorizationsController < Doorkeeper::ApplicationController
  def _layout(lookup_context, formats); end
  def after_successful_authorization(context); end
  def authorization; end
  def authorize_response; end
  def before_successful_authorization(context = nil); end
  def build_context(**attributes); end
  def create; end
  def destroy; end
  def matching_token?; end
  def new; end
  def pre_auth; end
  def pre_auth_param_fields; end
  def pre_auth_params; end
  def redirect_or_render(auth); end
  def render_error; end
  def render_success; end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def strategy; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_61
end
module Anonymous_Module_61
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::AuthorizedApplicationsController < Doorkeeper::ApplicationController
  def _layout(lookup_context, formats); end
  def destroy; end
  def index; end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_62
end
module Anonymous_Module_62
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::ApplicationMetalController < ActionController::API
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_63
  include Doorkeeper::Helpers::Controller
end
module Anonymous_Module_63
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::TokensController < Doorkeeper::ApplicationMetalController
  def after_successful_authorization(context); end
  def authorize_response; end
  def authorized?; end
  def before_successful_authorization(context = nil); end
  def build_context(**attributes); end
  def create; end
  def introspect; end
  def revocation_error_response; end
  def revoke; end
  def revoke_token; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def strategy; end
  def token; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_64
end
module Anonymous_Module_64
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
class Doorkeeper::TokenInfoController < Doorkeeper::ApplicationMetalController
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def show; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_65
end
module Anonymous_Module_65
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_25
  extend Anonymous_Module_26
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_25
  include Anonymous_Module_26
end
