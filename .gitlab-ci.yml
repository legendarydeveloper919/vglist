image: "registry.gitlab.com/connorshea/vglist:latest"

services:
  - postgres:11

variables:
  BUNDLE_PATH: vendor/bundle
  DB_HOST: postgres
  POSTGRES_DB: ci_test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust
  RAILS_ENV: test
  RACK_ENV: test
  NODE_ENV: test
  CI: 'true'
  BUNDLER_VERSION: '2.1.4'

# Cache gems and node_modules in between builds
cache:
  key: '$BUNDLER_VERSION'
  paths:
    - vendor/bundle
    - node_modules
  # By default, only pull. We don't need every job to update the cache.
  policy: pull

before_script:
  - ruby -v
  - node -v
  - gem install bundler:$BUNDLER_VERSION
  - echo -e "section_start:`date +%s`:bundle_install[collapsed=true]\r\e[0Kbundle install"
  - bundle install -j $(nproc)
  - echo -e "section_end:`date +%s`:bundle_install\r\e[0K"
  - echo -e "section_start:`date +%s`:yarn_install[collapsed=true]\r\e[0Kyarn install"
  - yarn install --frozen-lockfile
  - echo -e "section_end:`date +%s`:yarn_install\r\e[0K"
  - cp config/database.yml.ci config/database.yml
  - echo -e "section_start:`date +%s`:db_create[collapsed=true]\r\e[0Kbundle exec rails db:create"
  - bundle exec rails db:create
  - echo -e "section_end:`date +%s`:db_create\r\e[0K"
  - echo -e "section_start:`date +%s`:db_migration[collapsed=true]\r\e[0Kbundle exec rails db:migrate"
  - bundle exec rails db:migrate --trace
  - echo -e "section_end:`date +%s`:db_migration\r\e[0K"

.no_db_template:
  before_script: &no_db_necessary
    - ruby -v
    - gem install bundler:$BUNDLER_VERSION
    - echo -e "section_start:`date +%s`:bundle_install[collapsed=true]\r\e[0Kbundle install"
    - bundle install -j $(nproc)
    - echo -e "section_end:`date +%s`:bundle_install\r\e[0K"
    - echo -e "section_start:`date +%s`:yarn_install[collapsed=true]\r\e[0Kyarn install"
    - yarn install --frozen-lockfile
    - echo -e "section_end:`date +%s`:yarn_install\r\e[0K"

# A simple hack to make it so the package cache is updated independently of any
# other jobs, to prevent unnecessary time spent pushing the cache for more than
# one job.
cacher:
  before_script: *no_db_necessary
  script:
    - bundle clean --force
  cache:
    key: '$BUNDLER_VERSION'
    paths:
      - vendor/bundle
      - node_modules
    policy: pull-push

sorbet:tc:
  before_script: *no_db_necessary
  script:
    - bundle exec srb tc . --ignore=vendor/

typescript:tsc:
  before_script: *no_db_necessary
  script:
    - yarn run tsc --noEmit

rubocop:
  before_script: *no_db_necessary
  script:
    - bundle exec rubocop

factory_bot_lint:
  script:
    - bundle exec rake factory_bot:lint

rspec:
  script:
    - bundle exec rake assets:precompile
    - bundle exec rspec
  coverage: '/\(\d+.\d+\%\) covered/'

db:seed:
  script:
    - bundle exec rails db:seed

graphql:lint:
  script:
    - bundle exec rake graphql:schema:idl
    - yarn graphql-schema-linter schema.graphql
